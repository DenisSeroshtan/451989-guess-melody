{"version":3,"file":"result-fail-view.js","sources":["js/view.js","js/utils.js","js/base-model.js","js/game/game-model.js","js/data.js","js/result/result-fail-view.js"],"sourcesContent":["export default class AbstractView {\n\n  get template() {\n    throw new Error(`View should be defined`);\n  }\n\n  get element() {\n    if (!this._element) {\n      this.create();\n    }\n\n    return this._element;\n  }\n\n  render() {\n    return this.createElement(this.template);\n  }\n\n  bind() {\n\n  }\n\n  create() {\n    this._element = this.render();\n    this.bind();\n  }\n\n  createElement(template) {\n    const outer = document.createElement(`template`);\n    outer.innerHTML = template;\n    return outer.content;\n  }\n\n  show() {\n    const mainScreen = document.querySelector(`.main`);\n    mainScreen.innerHTML = ``;\n    mainScreen.appendChild(this.element);\n  }\n}\n","import gameModel from './game/game-model.js';\n\nexport function deepCopy(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n\nconst preloadData = {};\nexport function preloadAudio(questions, successFunction, failFunction) {\n  preloadData.files = [];\n  preloadData.successFunction = successFunction;\n  preloadData.failFunction = failFunction;\n\n  for (let question of questions) {\n    switch (question.type) {\n      case gameModel.QuestionType.ARTIST:\n        preloadData.files.push(question.data.file);\n        break;\n      case gameModel.QuestionType.GENRE:\n        preloadData.files = preloadData.files.concat(getFilesFromAnswers(question.answers));\n        break;\n    }\n  }\n\n  try {\n    loadFile();\n  } catch (error) {\n    preloadData.failFunction();\n  }\n}\n\nfunction loadFile() {\n  let player = new Audio();\n  player.addEventListener(`canplaythrough`, audioLoadedHandler);\n  if (preloadData.files[0]) {\n    player.src = preloadData.files[0];\n  } else {\n    audioLoadedHandler();\n  }\n}\n\nfunction audioLoadedHandler(event) {\n  preloadData.files.shift();\n\n  if (!preloadData.files.length) {\n    preloadData.successFunction();\n  } else {\n    loadFile();\n  }\n}\n\nfunction getFilesFromAnswers(answers) {\n  const returnArray = [];\n\n  for (let answer of answers) {\n    returnArray.push(answer.file);\n  }\n\n  return returnArray;\n}\n","export class BaseAdapter {\n  constructor() {\n    if (new.target === BaseAdapter) {\n      throw new Error();\n    }\n  }\n\n  preprocess(data) {\n    return data;\n  }\n\n  toServer(data) {\n    return data;\n  }\n}\n\nconst defaultAdapter = new class extends BaseAdapter {}();\n\nexport default class BaseModel {\n  get urlRead() {\n    throw new Error(`Abstract method. Define the URL for model.`);\n  }\n\n  get urlWrite() {\n    throw new Error(`Abstract method. Define the URL for model.`);\n  }\n\n  load(adapter = defaultAdapter) {\n    return fetch(this.urlRead)\n      .then((resp) => resp.json())\n      .then(adapter.preprocess);\n  }\n\n  send(data, adapter = defaultAdapter) {\n    const requestSettings = {\n      body: adapter.toServer(data),\n      headers: {\n        'Content-Type': `application/json`\n      },\n      method: `POST`\n    };\n\n    return fetch(this.urlWrite, requestSettings)\n      .then(this.onUpload);\n  }\n}\n","import {deepCopy} from '../utils.js';\nimport BaseModel from '../base-model.js';\nimport {BaseAdapter} from '../base-model.js';\n\nconst gameModelAdapter = new class extends BaseAdapter {\n  constructor() {\n    super();\n  }\n\n  preprocess(data) {\n    return data.map((item) => {\n      switch (item.type) {\n        case `artist`:\n          return {type: 1, data: {file: item.src}, answers: gameModelAdapter.proceedArtistAnswers(item.answers)};\n        case `genre`:\n          return {type: 2, data: item.question, answers: gameModelAdapter.proceedGenreAnswers(item.answers, item.genre)};\n      }\n\n      return {};\n    });\n  }\n\n  toServer(data) {\n    return JSON.stringify(data);\n  }\n\n  proceedArtistAnswers(answers) {\n    return answers.map((item) => {\n      return {valid: item.isCorrect, artistName: item.title, image: item.image.url};\n    });\n  }\n\n  proceedGenreAnswers(answers, correctGenre) {\n    return answers.map((item) => {\n      return {valid: item.genre === correctGenre ? true : false, file: item.src};\n    });\n  }\n}();\n\nclass GameModel extends BaseModel {\n\n  get urlRead() {\n    return `https://intensive-ecmascript-server-btfgudlkpi.now.sh/guess-melody/questions`;\n  }\n\n  get correctAnswers() {\n    return this.state.questions.reduce((sum, question) => {\n      return sum + (question.isUserAnswerCorrect ? 1 : 0);\n    }, 0);\n  }\n\n  get gameTime() {\n    return this.initState.time - this.state.time;\n  }\n\n  set timeLeft(value) {\n    this.state.time = value;\n\n    if (!this.state.time) {\n      this.onFinishGame();\n    }\n  }\n\n  get timeLeft() {\n    return this.state.time;\n  }\n\n  get lifes() {\n    return this.state.life;\n  }\n\n  get currentQuestion() {\n    return this.state.questions[this.state.currentIndex];\n  }\n\n  get stats() {\n    const stats = {};\n    stats.answers = this.correctAnswers;\n    stats.time = this.gameTime;\n\n    return stats;\n  }\n\n  get isFail() {\n    return !this.timeLeft || !this.lifes;\n  }\n\n  constructor() {\n    super();\n\n    this.QuestionType = {\n      ARTIST: 1,\n      GENRE: 2\n    };\n\n    this.questions = [];\n    this.initState = Object.freeze({\n      'time': 120,\n      'life': 3,\n      'currentIndex': 0,\n      'questions': deepCopy(this.questions)\n    });\n    this.state = Object.assign({}, this.initState);\n  }\n\n  resetGame() {\n    this.state = Object.assign({}, this.initState, {questions: deepCopy(this.questions)});\n  }\n\n  answer(...selectedIndexes) {\n    this.proceedCurrentAnswer(selectedIndexes);\n\n    if (this.currentQuestion.isUserAnswerCorrect) {\n      this.nextQuestion();\n    } else {\n      this.state.life = Math.max(0, this.state.life - 1);\n\n      if (this.state.life < 1) {\n        this.onFinishGame();\n      } else {\n        this.nextQuestion();\n      }\n    }\n  }\n\n  nextQuestion() {\n    this.state.currentIndex++;\n\n    if (this.state.currentIndex >= this.state.questions.length) {\n      this.onFinishGame();\n    } else {\n      this.onNextQuestion();\n    }\n  }\n\n  proceedCurrentAnswer(answerIndexes) {\n    const answers = this.currentQuestion.answers;\n    answerIndexes.forEach((item) => {\n      answers[item].isUserAnswer = true;\n    });\n\n    const correct = answers.findIndex((item, i) => item.valid && !item.isUserAnswer || !item.valid && item.isUserAnswer) < 0;\n    this.currentQuestion.isUserAnswerCorrect = correct;\n    return correct;\n  }\n\n  onFinishGame() {\n\n  }\n\n  onNextQuestion() {\n\n  }\n\n  load() {\n    return super.load(gameModelAdapter);\n  }\n}\n\nconst model = new GameModel();\nexport default model;\n","import gameModel from './game/game-model.js';\n\nconst USERNAME = `451989`;\nexport const SERVER_URL = `https://intensive-ecmascript-server-btfgudlkpi.now.sh/guess-melody/stats/${USERNAME}`;\n\nexport const gameInfo = Object.freeze({\n  'gameName': `Угадай Мелодию`,\n  'rules': `Правила просты&nbsp;— за&nbsp;${Math.round(gameModel.initState.time / 60)} минуты дать\n  максимальное количество правильных ответов.<br>\n  Удачи!`\n});\n","import AbstractView from '../view.js';\nimport * as data from '../data.js';\n\nexport default class ResultFailView extends AbstractView {\n  get template() {\n    return `<section class=\"main main--result\">\n      <section class=\"logo\" title=\"${data.gameInfo.gameName}\"><h1>${data.gameInfo.gameName}</h1></section>\n        <h2 class=\"title\">Вы проиграли</h2>\n        <div class=\"main-stat\">Ничего, вам повезет в следующий раз</div>\n        <span role=\"button\" tabindex=\"0\" class=\"main-replay\">Сыграть ещё раз</span>\n      </section>`;\n  }\n\n  onRestartClick() {\n\n  }\n\n  bind() {\n    const screenDom = this.element;\n\n    const button = screenDom.querySelector(`.main-replay`);\n    button.onclick = () => {\n      this.onRestartClick();\n    };\n\n    return screenDom;\n  }\n}\n"],"names":["AbstractView","createElement","template","_element","render","bind","outer","document","innerHTML","content","mainScreen","querySelector","appendChild","element","Error","create","deepCopy","object","JSON","parse","stringify","BaseAdapter","new","target","data","defaultAdapter","BaseModel","adapter","fetch","urlRead","then","resp","json","preprocess","requestSettings","toServer","urlWrite","onUpload","gameModelAdapter","map","item","type","file","src","answers","proceedArtistAnswers","question","proceedGenreAnswers","genre","valid","isCorrect","artistName","title","image","url","correctGenre","GameModel","state","questions","reduce","sum","isUserAnswerCorrect","initState","time","value","onFinishGame","life","currentIndex","stats","correctAnswers","gameTime","timeLeft","lifes","QuestionType","Object","freeze","assign","selectedIndexes","proceedCurrentAnswer","currentQuestion","nextQuestion","Math","max","length","onNextQuestion","answerIndexes","forEach","isUserAnswer","correct","findIndex","i","model","gameInfo","round","gameModel","ResultFailView","screenDom","button","onclick","onRestartClick","gameName"],"mappings":"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"}